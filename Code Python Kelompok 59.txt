import RPi.GPIO as GPIO
import time
import requests
import telepot
import imutils
import cv2
import os
from datetime import datetime
from imutils.video import VideoStream, FPS

# Nonaktifkan peringatan GPIO
GPIO.setwarnings(False)  

# Pin definitions
mq2Pin = 4
buzzerPin = 25

# Ubidots Configuration
UBIDOTS_API_KEY = "BBFF-KsIA3idbf4f8wxSpC16zLO4WZKSWci"
DEVICE_LABEL = "nugraha"
MQ2_SENSOR_LABEL = "mq2"
PRESENCE_SENSOR_LABEL = "present_switch"
UBIDOTS_URL = f"https://industrial.api.ubidots.com/api/v1.6/devices/{DEVICE_LABEL}/{PRESENCE_SENSOR_LABEL}"
headers = {
    "X-Auth-Token": UBIDOTS_API_KEY,
    "Content-Type": "application/json"
}

# Telegram Configuration
TELEGRAM_BOT_TOKEN = "6413778774:AAHpt3dNxuHCYe1wvxhynurR9orItg6jXLQ"
TELEGRAM_CHAT_ID = "6445674226" 
TELEGRAM_URL = "https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

def setup_pins():
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(mq2Pin, GPIO.IN)
    GPIO.setup(buzzerPin, GPIO.OUT)

def capture_and_send_photo(frame, message):
    # Capture a screenshot of the current frame
    screenshot_path = f"/home/kel59/photos/photo_{time.time()}.jpg"
    cv2.imwrite(screenshot_path, frame)

    # SEND PHOTO TO TELEGRAM
    with open(screenshot_path, 'rb') as photo_file:
        bot = telepot.Bot(TELEGRAM_BOT_TOKEN)
        bot.sendPhoto(TELEGRAM_CHAT_ID, photo_file, caption=message)

    # Delete the screenshot after sending
    os.remove(screenshot_path)

def read_mq2_sensor():
    return GPIO.input(mq2Pin)

def read_switch_data():
	response = requests.get(UBIDOTS_URL, headers=headers)
	switch_value = response.json()['last_value']['value']
	
	return switch_value

def turn_on_buzzer():
    GPIO.output(buzzerPin, GPIO.HIGH)
    
def turn_off_buzzer():
    GPIO.output(buzzerPin, GPIO.LOW)

def build_payload(variable_1, val_mq2):
    payload = {variable_1: val_mq2}

    return payload

def post_request(payload):
    # Creates the headers for the HTTP requests
    global headers
	
    url = "http://industrial.api.ubidots.com"
    url = "{}/api/v1.6/devices/{}".format(url, DEVICE_LABEL)

    # Makes the HTTP requests
    status = 400
    attempts = 0
    while status >= 400 and attempts <= 5:
        req = requests.post(url=url, headers=headers, json=payload)
        status = req.status_code
        attempts += 1
        time.sleep(1)

    # Processes results
    print(req.status_code, req.json())
    if status >= 400:
        print("[ERROR] Could not send data after 5 attempts, please check \
            your token credentials and internet connection")
        return False

    print("[INFO] request made properly, your device is updated")
    return True

def send_data_to_ubidots(value_mq2):
	global MQ2_SENSOR_LABEL
	
	payload = build_payload(MQ2_SENSOR_LABEL, value_mq2)
	print("[INFO] Attemping to send data")
	post_request(payload)
	print("[INFO] finished")
	

def send_telegram_message(message):
    global TELEGRAM_CHAT_ID, TELEGRAM_BOT_TOKEN
    bot = telepot.Bot(TELEGRAM_BOT_TOKEN)
    bot.sendMessage(chat_id, message)

def turn_on_buzzer():
	GPIO.output(buzzerPin, 1)
	time.sleep(5)
	GPIO.output(buzzerPin, 0)
	time.sleep(0.2)

if _name_ == '_main_':
    setup_pins()
    GPIO.output(buzzerPin, GPIO.LOW)  # Pastikan buzzer dimatikan pada awalnya
    vs = VideoStream().start()
    fps = FPS().start()
    while True:
        frame = vs.read()
        frame = imutils.resize(frame, width=500)
        cv2.imshow('testing', frame)
	
        mq2_value = read_mq2_sensor()
        presence_switch_value = read_switch_data()

        # buzzer_on()
        print(mq2_value, presence_switch_value)
        if (mq2_value == 0 and presence_switch_value == 0):
	    # turn on buzzer
            turn_on_buzzer()
            message = f"Ada gas terdeteksi pada pukul {datetime.now()}!"
            capture_and_send_photo(frame, message)  # Capture and send photo
            # send_telegram_message("Ada gas terdeteksi!")  # Ubah pesan sesuai kebutuhan
        else:
            # Matikan buzzer
            turn_off_buzzer()  
        
        send_data_to_ubidots(mq2_value)  # Kirim data ke Ubidots untuk sensor PIR
        time.sleep(2)  # Jeda antara pembacaan
        fps.update()

    fps.stop()
    cv2.destroyAllwindows()
    vs.stop()